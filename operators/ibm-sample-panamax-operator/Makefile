# Current Operator version
VERSION ?= 4.1.0
CHANNELS ?= v4.0
DEFAULT_CHANNEL ?= v4.0
BUNDLE_VERSION ?= 4.1.0

# Options for 'bundle-build'
ifneq ($(origin CHANNELS), undefined)
BUNDLE_CHANNELS := --channels=$(CHANNELS)
endif
ifneq ($(origin DEFAULT_CHANNEL), undefined)
BUNDLE_DEFAULT_CHANNEL := --default-channel=$(DEFAULT_CHANNEL)
endif
BUNDLE_METADATA_OPTS ?= $(BUNDLE_CHANNELS) $(BUNDLE_DEFAULT_CHANNEL)

# For creating catalog image
GIT_SHA := $(shell git rev-parse HEAD | tr a-f A-F | cut -c -9)
# WARNING: if you build the index and push the index separately you should override this to a consistent value
BUILD_DATE := $(shell date +%Y%m%d.%H%M%S)
CONTAINER_TOOL ?= docker
VERSIONS_TXT ?= build/install/versions.txt


REPO ?= cp.stg.icr.io/cp

# Image names
CATALOG_IMG ?= ibm-sample-panamax-catalog
BUNDLE_IMG ?= ibm-sample-panamax-operator-bundle
OPERATOR_IMG ?= ibm-sample-panamax-operator

# Image URL to use all building/pushing image targets
IMG ?= $(REPO)/$(OPERATOR_IMG):$(VERSION)-$(BUILD_DATE)
# Produce CRDs that work back to Kubernetes 1.11 (no version conversion)
#CRD_OPTIONS ?= "crd:trivialVersions=true"
CRD_OPTIONS ?= "crd:crdVersions={v1}"

# Get the currently used golang install path (in GOPATH/bin, unless GOBIN is set)
ifeq (,$(shell go env GOBIN))
GOBIN=$(shell go env GOPATH)/bin
else
GOBIN=$(shell go env GOBIN)
endif

BINARY=post-processor
MAIN_PKG=./cmd/${BINARY}

.PHONY: buildPostProcessor
buildPostProcessor: ## builds the golang binary that's used by other targets to fix things in produced yaml files that cannot be autogenerated (for local build only)
	CGO_ENABLED=0 go build -o bin/${BINARY} ${MAIN_PKG}

all: manager

test: generate fmt vet manifests ## run go tests
	go test ./... -coverprofile cover.out

manager: generate fmt vet ## build manager binary
	go build -o bin/manager main.go

run: generate fmt vet manifests ## run against the configured Kubernetes cluster in ~/.kube/config
	go run ./main.go

install: manifests kustomize ## install CRDs into a cluster
	$(KUSTOMIZE) build config/crd | kubectl apply -f -

uninstall: manifests kustomize ## uninstall CRDs from a cluster
	$(KUSTOMIZE) build config/crd | kubectl delete -f -

deploy: manifests kustomize ## deploy controller in the configured Kubernetes cluster in ~/.kube/config
	cd config/manager && $(KUSTOMIZE) edit set image controller=${IMG}
	$(KUSTOMIZE) build config/default | kubectl apply -f -

unDeploy: manifests kustomize ## un-deploy controller in the configured Kubernetes cluster in ~/.kube/config
	cd config/manager && $(KUSTOMIZE) edit set image controller=${IMG}
	$(KUSTOMIZE) build config/default | kubectl delete -f -	

manifests: controller-gen ## generate manifests e.g. CRD, RBAC etc.
	$(CONTROLLER_GEN) $(CRD_OPTIONS) rbac:roleName=manager-clusterrole webhook paths="./..." output:crd:artifacts:config=config/crd/bases

fmt: ## run go fmt against code
	go fmt ./...

vet: ## run go vet against code
	go vet ./...

# Generate code
generate: controller-gen ## Generate from templated code (follow up with postProcessor target)
	$(CONTROLLER_GEN) object:headerFile="hack/boilerplate.go.txt" paths="./..."

docker-build-test: test ## build docker image without first formatting, vetting, etc.
	docker build . -t ${IMG} --build-arg token=$(GITHUB_TOKEN) --build-arg user=$(GITHUB_USER)

docker-build: generate fmt vet manifests ## build docker image
	docker build . -t ${IMG} --build-arg token=$(GITHUB_TOKEN) --build-arg user=$(GITHUB_USER)

docker-push: ## push docker image
	docker push ${IMG}

docker-multiarch-build: generate fmt vet manifests ## builds and pushes images for multiple architectures and a fat manifest for them
	./build/scripts/buildMultiarchImage.sh --image-name ${REPO}/${OPERATOR_IMG} --tag ${VERSION}-$(BUILD_DATE) --architectures "amd64,ppc64le,s390x" --container-tool ${CONTAINER_TOOL} --push

# find controller-gen, download if necessary (helper for other targets)
controller-gen:
ifeq (, $(shell which controller-gen))
	@{ \
	set -e ;\
	CONTROLLER_GEN_TMP_DIR=$$(mktemp -d) ;\
	cd $$CONTROLLER_GEN_TMP_DIR ;\
	go mod init tmp ;\
	go get sigs.k8s.io/controller-tools/cmd/controller-gen@v0.3.0 ;\
	rm -rf $$CONTROLLER_GEN_TMP_DIR ;\
	}
CONTROLLER_GEN=$(GOBIN)/controller-gen
else
CONTROLLER_GEN=$(shell which controller-gen)
endif

# Determines the correct path for the kustomize command (this is just a helper for other targets)
kustomize:
ifeq (, $(shell which kustomize))
	@{ \
	set -e ;\
	KUSTOMIZE_GEN_TMP_DIR=$$(mktemp -d) ;\
	cd $$KUSTOMIZE_GEN_TMP_DIR ;\
	go mod init tmp ;\
	go get sigs.k8s.io/kustomize/kustomize/v3@v3.5.4 ;\
	rm -rf $$KUSTOMIZE_GEN_TMP_DIR ;\
	}
KUSTOMIZE=$(GOBIN)/kustomize
else
KUSTOMIZE=$(shell which kustomize)
endif

produceKubeResources: manifests kustomize ## creates the Operator-SDK 0.x style deploy directory yaml files
	cd config/manager && $(KUSTOMIZE) edit set image controller=${IMG}
	$(KUSTOMIZE) build config/default > ./deploy/manifests.yaml

produceNativeKubeResources: manifests kustomize ## creates the Operator-SDK 0.x style deploy directory yaml files with webhooks disabled
	cd config/manager && $(KUSTOMIZE) edit set image controller=${IMG}
	$(KUSTOMIZE) build config/default_local > ./deploy/manifestsNativeDeploy.yaml
	./bin/post-processor fixDeploy -n ./deploy/manifestsNativeDeploy.yaml
	rm -fr ./deploy/crds
	mkdir ./deploy/crds
	cp config/samples/sample* ./deploy/crds/
	./build/scripts/adjust-cr-name.sh -d ./deploy/crds/
		
	
.PHONY: bundle
bundle: manifests kustomize ## generate bundle manifests and metadata, then validate generated files.
	operator-sdk generate kustomize manifests -q
	cd config/manager && $(KUSTOMIZE) edit set image controller=$(IMG)
	$(KUSTOMIZE) build config/manifests | operator-sdk generate bundle -q --overwrite --version $(VERSION) $(BUNDLE_METADATA_OPTS)
	operator-sdk bundle validate ./bundle
	./bin/post-processor fixBundle -c ./bundle/manifests/ibm-sample-panamax-operator.clusterserviceversion.yaml -d ./bundle/manifests/sample.ibm.com_panamaxes.yaml -r ./cmd/post-processor/relatedImages.csv

.PHONY: bundle-build
bundle-build: ## build the bundle image
	docker build -f bundle.Dockerfile -t $(REPO)/$(BUNDLE_IMG):$(BUNDLE_VERSION) .

publish-catalog: versions-and-bundles index ## builds/pushes bundle images for all git releases and the current branch, then creates a multiarch catalog image from them

versions-and-bundles: ## Build and push bundle images from git releases and the current branch, as well as creating a versions.txt file containing bundle info used by the "index" target
	./build/scripts/versionsAndBundlesFromReleases.sh --bundle-image ${REPO}/${BUNDLE_IMG} --csv-yaml ./bundle/manifests/ibm-sample-panamax-operator.clusterserviceversion.yaml --annotations-yaml ./bundle/metadata/annotations.yaml --versions-txt ${VERSIONS_TXT} --default-channel ${DEFAULT_CHANNEL} --container-tool ${CONTAINER_TOOL} --push

index: build-index push-index ## Build and push catalog source images that can be installed on a cluster (for ocp 4.5 and ocp4.6)

build-index: build-index-ocp4.5 build-index-ocp4.6 ## Build catalog source image without pushing (if used individually, modify the BUILD_DATE variable above)

build-index-ocp4.5: ## build catalog for OCP 4.5
	./build/scripts/buildIndexOnRemoteWorker.sh ${REPO} ${CATALOG_IMG} --date "${BUILD_DATE}" --git-sha "${GIT_SHA}" --versions-csv ${VERSIONS_TXT} --image-name ${BUNDLE_IMG} --container-tool ${CONTAINER_TOOL} --release ${VERSION} --vendor IBM --summary "IBM Sample Panamax Operator catalog image" --description "The catalog image for the IBM Sample Panamax Operator" --base-image "registry.redhat.io/openshift4/ose-operator-registry" --opm-version "v4.5" --opm-tool "opmv1.12.3d"

build-index-ocp4.6: ## build catalog for OCP 4.6
	./build/scripts/buildIndexOnRemoteWorker.sh ${REPO} ${CATALOG_IMG} --date "${BUILD_DATE}" --git-sha "${GIT_SHA}" --versions-csv ${VERSIONS_TXT} --image-name ${BUNDLE_IMG} --container-tool ${CONTAINER_TOOL} --release ${VERSION} --vendor IBM --summary "IBM Sample Panamax Operator catalog image" --description "The catalog image for the IBM Sample Panamax Operator" --base-image "registry.redhat.io/openshift4/ose-operator-registry" --opm-version "v4.6" --opm-tool "opmv1.14.0"

push-index: push-index-ocp4.5 push-index-ocp4.6 ## Push catalog source image (if used individually, modify the BUILD_DATE variable above)

push-index-ocp4.5: ## push multi arch image catalog for OCP 4.5
	./build/scripts/pushIndexOnRemoteWorker.sh ${REPO} ${CATALOG_IMG} --date "${BUILD_DATE}" --git-sha "${GIT_SHA}" --opm-version "v4.5" --container-tool ${CONTAINER_TOOL}

push-index-ocp4.6: ## push multi arch image catalog for OCP 4.6
	./build/scripts/pushIndexOnRemoteWorker.sh ${REPO} ${CATALOG_IMG} --date "${BUILD_DATE}" --git-sha "${GIT_SHA}" --opm-version "v4.6" --container-tool ${CONTAINER_TOOL}

update-related-digests: ## updates the image digests for images listed in cmd/post-processor/relatedImages.csv
	./bin/post-processor fixDigests -r cmd/post-processor/relatedImages.csv

.PHONY: help
help: ## search for comments next to make targets and print them
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-25s\033[0m %s\n", $$1, $$2}'

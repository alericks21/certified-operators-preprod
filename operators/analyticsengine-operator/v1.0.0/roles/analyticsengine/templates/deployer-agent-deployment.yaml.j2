apiVersion: apps/v1 # for versions before 1.8.0 use apps/v1beta1
kind: Deployment
metadata:
  name: "{{ name }}-{{ deployer_agent.name }}"
  labels:
    function: "{{ name }}-{{ deployer_agent.name }}"
{% if cpdLabels  %} 
    {{ cpdLabels | to_nice_yaml| indent(4) }}
{% endif %}
  annotations:
{% if metering  %} 
    {{ metering | to_nice_yaml| indent(4) }}
{% endif %}
spec:
  selector:
    matchLabels:
      function: "{{ name }}-{{ deployer_agent.name }}"
{% if cpdLabels  %} 
      {{ cpdLabels | to_nice_yaml| indent(6) }}
{% endif %}
  replicas: {{ deployer_agent_replicas }} # tells deployment to run X pods matching the template
  template:
    metadata:
      labels:
        function: "{{ name }}-{{ deployer_agent.name }}"
{% if cpdLabels  %} 
        {{ cpdLabels | to_nice_yaml| indent(8) }}
{% endif %}
      annotations:
{% if metering  %} 
        {{ metering | to_nice_yaml| indent(8) }}
{% endif %}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - {{ global.architecture }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      containers:
      - name: "{{ name }}-{{ deployer_agent.name }}"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          runAsNonRoot: true
          privileged: false
          readOnlyRootFilesystem: false
{% if image_tags is defined and image_tags.tag is defined %}
{% set image_suffix = image_tags.tag %}
{% set image_separator = ":" %}
{% else %}
{% set image_suffix = image_digests.deployer_agent %}
{% set image_separator = "@" %}
{% endif %}
{% if pull_prefix is defined and pull_prefix.deployer_agent is defined %}
{% set image_prefix = pull_prefix.deployer_agent %}
{% else %}
{% set image_prefix = pullPrefix %}
{% endif %}
        image: "{{ image_prefix }}/{{ images.deployer_agent }}{{ image_separator }}{{ image_suffix }}"
        imagePullPolicy: {{ micro_service.pull_policy }}
        resources:
          requests:
            cpu: {{ deployer_agent.requests.cpu }}
            memory: {{ deployer_agent.requests.memory }}
          limits:
            cpu: {{ deployer_agent.limits.cpu }}
            memory: {{ deployer_agent.limits.memory }}
        ports:
        - containerPort: {{ deployer_agent.target_port }}
          protocol: TCP
        envFrom:
{% if deployer_agent.hb_env_config_enabled %}
        - configMapRef:
            name: {{ name }}-{{ deployer_agent.name }}-env-config
{% endif %}
{% if deployer_agent.hb_env_secret_enabled %}
        - secretRef:
            name: {{ name }}-{{ deployer_agent.name }}-env-secret
{% endif %}
        volumeMounts:
        - name: {{ trust_store.cert_secret_name }}
          mountPath: "/certs"
{% if deployer_agent.hb_bootstrap_config_enabled %}
        - name: "{{ name }}-{{ deployer_agent.name }}-bootstrap-config"
          mountPath: "{{ deployer_agent.bootstrap_config_path }}"
          readOnly: true
{% endif %}
{% if deployer_agent.hb_config_enabled %}
        - name: "{{ name }}-{{ deployer_agent.name }}-config"
          mountPath: "{{ deployer_agent.config_path }}"
          readOnly: true
{% endif %}
{% if deployer_agent.hb_bootstrap_secret_enabled %}
        - name: "{{ name }}-{{ deployer_agent.name }}-bootstrap-secret"
          mountPath: "{{ deployer_agent.bootstrap_secret_path }}"
          subPath: bootstrap-secret.yaml
          readOnly: true
{% endif %}
{% if deployer_agent.hb_secret_enabled %}
        - name: "{{ name }}-{{ deployer_agent.name }}-secret"
          mountPath: "{{ deployer_agent.secret_path }}"
          subPath: secret.yaml
          readOnly: true
{% endif %}
        readinessProbe:
          httpGet:
            path: {{ deployer_agent.path }}
            port: {{ deployer_agent.target_port }}
            scheme: {{ deployer_agent.scheme }}
          initialDelaySeconds: {{ deployer_agent.readiness_probe.initial_delay_seconds }}
          periodSeconds: {{ deployer_agent.readiness_probe.period_seconds }}
          failureThreshold: {{ deployer_agent.readiness_probe.failure_threshold }}
          timeoutSeconds: {{ deployer_agent.readiness_probe.timeout_seconds }}
        livenessProbe:
          httpGet:
            path: {{ deployer_agent.path }}
            port: {{ deployer_agent.target_port }}
            scheme: {{ deployer_agent.scheme }}
          initialDelaySeconds: {{ deployer_agent.liveness_probe.initial_delay_seconds }}
          periodSeconds: {{ deployer_agent.liveness_probe.period_seconds }}
          failureThreshold: {{ deployer_agent.liveness_probe.failure_threshold }}
          timeoutSeconds: {{ deployer_agent.liveness_probe.timeout_seconds }}
      serviceAccount: {{ sa.editor }}
      serviceAccountName: {{ sa.editor }}
      volumes:
        - name: {{ trust_store.cert_secret_name }}
          secret:
            secretName: {{ trust_store.cert_secret_name }}
            items:
            - key: tls.crt
              path: microserviceCertificates.pem
            - key: tls.key
              path: microserviceKeys.pem
{% if deployer_agent.hb_bootstrap_config_enabled %}
        - name: "{{ name }}-{{ deployer_agent.name }}-bootstrap-config"
          configMap:
            name: "{{ name }}-{{ deployer_agent.name }}-bootstrap-config"
            items:
            - key: "bootstrap-config.yaml"
              path: "bootstrap-config.yaml"
{% endif %}
{% if deployer_agent.hb_config_enabled %}
        - name: "{{ name }}-{{ deployer_agent.name }}-config"
          configMap:
            name: "{{ name }}-{{ deployer_agent.name }}-config"
            items:
            - key: "config.yaml"
              path: "config.yaml"
{% endif %}
{% if deployer_agent.hb_bootstrap_secret_enabled %}
        - name: "{{ name }}-{{ deployer_agent.name }}-bootstrap-secret"
          secret:
            secretName: "{{ name }}-{{ deployer_agent.name }}-bootstrap-secret" 
{% endif %}
{% if deployer_agent.hb_secret_enabled %}
        - name: "{{ name }}-{{ deployer_agent.name }}-secret"
          secret:
            secretName: "{{ name }}-{{ deployer_agent.name }}-secret" 
{% endif %}

# This is a YAML-formatted file.

apiVersion: apps/v1 # for versions before 1.8.0 use apps/v1beta1
kind: Deployment
metadata:
  name: "{{ name }}-create-trust-store"
  annotations:
{% if metering  %} 
    {{ metering | to_nice_yaml| indent(4) }}
{% endif %}
  labels:
    function: "{{ name }}-create-trust-store"
{% if cpdLabels  %} 
    {{ cpdLabels | to_nice_yaml| indent(4) }}
{% endif %}
spec:
  selector:
    matchLabels:
      function: "{{ name }}-create-trust-store"
{% if cpdLabels  %} 
      {{ cpdLabels | to_nice_yaml| indent(6) }}
{% endif %}
  template: # create pods using pod definition in this template
    metadata:
      annotations:
{% if metering  %} 
        {{ metering | to_nice_yaml| indent(8) }}
{% endif %}
      # the name is not included in the meta data as a unique name is
      # generated from the deployment name
      labels:
        function: "{{ name }}-create-trust-store"
{% if cpdLabels  %} 
        {{ cpdLabels | to_nice_yaml| indent(8) }}
{% endif %}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - {{ global.architecture }}
      serviceAccount: {{ sa.editor }}
      serviceAccountName: {{ sa.editor }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      containers:
      - name: "{{ name }}-create-trust-store"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          runAsNonRoot: true
          privileged: false
          readOnlyRootFilesystem: false
{% if image_tags is defined and image_tags.tag is defined %}
{% set image_suffix = image_tags.tag %}
{% set image_separator = ":" %}
{% else %}
{% set image_suffix = image_digests.trust_store %}
{% set image_separator = "@" %}
{% endif %}
{% if pull_prefix is defined and pull_prefix.trust_store is defined %}
{% set image_prefix = pull_prefix.trust_store %}
{% else %}
{% set image_prefix = pullPrefix %}
{% endif %}
        image: "{{ image_prefix }}/{{ images.trust_store }}{{ image_separator }}{{ image_suffix }}"
        command: ["/bin/bash", "-c"]
        args :
        - "bash {{ trust_store.script_path }}create-trust-store-and-secret.sh {{ trust_store.password }} {{ trust_store.icp4d_ts_secret_name }} {{ trust_store.os_cert_secret_name }} {{ trust_store.icp4d_cert_path }} {{ trust_store.zen_metastore_certs_secret_name }} {{ spark_metastoredb.cockroachdb }} {{ spark_metastoredb.certs_path }} {{ spark_metastoredb.database_root_cert }} {{ spark_metastoredb.database_client_cert }} {{ spark_metastoredb.database_client_key }} {{ spark_metastoredb.database_client_key_pkcs8 }}"
        imagePullPolicy: {{ micro_service.pull_policy }}
        readinessProbe:
          exec:
            command:
            - ls
            - {{ trust_store.script_path }}create-trust-store-and-secret.sh
          initialDelaySeconds: {{ trust_store.readiness_probe.initial_delay_seconds }}
          periodSeconds: {{ trust_store.readiness_probe.period_seconds }}
          failureThreshold: {{ trust_store.readiness_probe.failure_threshold }}
        livenessProbe:
          exec:
            command:
            - ls
            - {{ trust_store.script_path }}create-trust-store-and-secret.sh
          initialDelaySeconds: {{ trust_store.liveness_probe.initial_delay_seconds }}
          periodSeconds: {{ trust_store.liveness_probe.period_seconds }}
          failureThreshold: {{ trust_store.liveness_probe.failure_threshold }}
        resources:
          requests:
            cpu: {{ trust_store.requests.cpu }}
            memory: {{ trust_store.requests.memory }}
          limits:
            cpu: {{ trust_store.limits.cpu }}
            memory: {{ trust_store.limits.memory }}
        volumeMounts:
        - name: "icp4d-certs"
          mountPath: {{ trust_store.icp4d_cert_path }}
          readOnly: true
        - name: "{{ name }}-create-trust-store-secret-script"
          mountPath: "{{ trust_store.script_path }}"
{% if spark_metastoredb.cockroachdb is defined %}
        - name: "{{ name }}-zen-user-home-pvc"
          mountPath: "{{ micro_service.zen_metastore_certs }}"
          subPath: "{{ zen_user_home_vol.meta_store_cert_path }}"
          readOnly: true
{% endif %}
      volumes:
        - name: "icp4d-certs"
          secret:
             secretName: {{ trust_store.cert_secret_name }}
        - name: "{{ name }}-create-trust-store-secret-script"
          configMap:
            name: "{{ name }}-create-trust-store-secret-script"
            items:
            - key: "create-trust-store-and-secret.sh"
              path: "create-trust-store-and-secret.sh"
{% if spark_metastoredb.cockroachdb is defined %}
        - name: "{{ name }}-zen-user-home-pvc"
          persistentVolumeClaim:
            claimName: "{{ zen_user_home_vol.name }}"
{% endif %}

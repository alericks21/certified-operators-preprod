apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ name }}-{{ nginx.name }}
  labels:
    function: "{{ name }}-{{ nginx.name }}"
{% if cpdLabels  %} 
    {{ cpdLabels | to_nice_yaml| indent(4) }}
{% endif %}
  annotations:
{% if metering  %} 
    {{ metering | to_nice_yaml| indent(4) }}
{% endif %}
spec:
  selector:
    matchLabels:
      function: "{{ name }}-{{ nginx.name }}"
{% if cpdLabels  %} 
      {{ cpdLabels | to_nice_yaml| indent(4) }}
{% endif %}
  replicas: {{ replicas }}
  template:
    metadata:
      annotations:
{% if metering  %} 
        {{ metering | to_nice_yaml| indent(8) }}
{% endif %}
      labels:
        function: {{ name }}-{{ nginx.name }}
{% if cpdLabels  %} 
        {{ cpdLabels | to_nice_yaml| indent(8) }}
{% endif %}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - {{ global.architecture }}
      serviceAccount: {{ sa.viewer }}
      serviceAccountName: {{ sa.viewer }}
      securityContext:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      containers:
      - name : {{ name }}-{{ nginx.name }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          runAsNonRoot: true
          privileged: false
          readOnlyRootFilesystem: false
{% if image_tags is defined and image_tags.tag is defined %}
{% set image_suffix = image_tags.tag %}
{% set image_separator = ":" %}
{% else %}
{% set image_suffix = image_digests.nginx %}
{% set image_separator = "@" %}
{% endif %}
{% if pull_prefix is defined and pull_prefix.nginx is defined %}
{% set image_prefix = pull_prefix.nginx %}
{% else %}
{% set image_prefix = pullPrefix %}
{% endif %}
        image: "{{ image_prefix }}/{{ images.nginx }}{{ image_separator }}{{ image_suffix }}"
        imagePullPolicy: {{ micro_service.pull_policy }}
        ports:
        - containerPort: {{ nginx.container_port }}
          protocol: TCP
        command: ["/bin/bash", "-c"]
        args: ["bash /tmp/nginx-resolver.sh {{ nginx_repo.nginx_conf_path }};/usr/sbin/nginx"]
        readinessProbe:
          tcpSocket:
            port: {{ nginx.container_port }}
          initialDelaySeconds: {{ nginx.readiness_probe.initial_delay_seconds }}
          periodSeconds: {{ nginx.readiness_probe.period_seconds }}
          failureThreshold: {{ nginx.readiness_probe.failure_threshold }}
        livenessProbe:
          tcpSocket:
            port: {{ nginx.container_port }}
          initialDelaySeconds: {{ nginx.liveness_probe.initial_delay_seconds }}
          periodSeconds: {{ nginx.liveness_probe.period_seconds }}
        resources:
          requests:
            cpu: {{ nginx.request_cpu }}
            memory: {{ nginx.request_memory }}
          limits:
            cpu: {{ nginx.limit_cpu }}
            memory: {{ nginx.limit_memory }}
        volumeMounts:
        - name: {{ name }}-{{ nginx.name }}-configmap
          mountPath: {{ nginx_repo.nginx_conf_path }}
        - name: {{ trust_store.cert_secret_name }}
          mountPath: {{ nginx.cert_path }}
      volumes:
        - name: {{ name }}-{{ nginx.name }}-configmap
          configMap:
            name: {{ name }}-{{ nginx.name }}-configmap
        - name: {{ trust_store.cert_secret_name }}
          secret:
            secretName: {{ trust_store.cert_secret_name }}
            items:
            - key: tls.crt
              path: cert.crt
            - key: tls.key
              path: cert.key

# This is a YAML-formatted file.

apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ name }}-cleanup-resources"
  annotations:
    "helm.sh/hook": "post-delete"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "5"
    "hook.deactivate.cpd.ibm.com/command": "[]"
    "hook.activate.cpd.ibm.com/command": "[]"
  labels:
    function: "{{ name }}-cleanup-resources"
{% if cpdLabels  %} 
      {{ cpdLabels | to_nice_yaml| indent(4) }}
{% endif %}
spec:
  backoffLimit: 4
  template:
    metadata:
      annotations:
        '{{ metering | to_nice_yaml | trim | indent(8) }}'
      labels:
#        app: "{{ name }}-cleanup-resources"
        '{{ cloudpak | to_nice_yaml | trim  | indent(8) }}'
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - {{ global.architecture }}
      restartPolicy: "OnFailure"
      serviceAccount: {{ sa.editor }}
      serviceAccountName: {{ sa.editor }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      containers:
      - name: "{{ name }}-cleanup-resources"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          runAsNonRoot: true
          privileged: false
          readOnlyRootFilesystem: false
        image: "{{ global.docker_registry_prefix }}/{{ trust_store.image }}:{{ spark.image.tag }}"
        command: ["/bin/bash", "-c"]
        args :
        - "bash {{ micro_service.path_prefix }}/scripts/cleanup-resources.sh"
        imagePullPolicy: {{ micro_service.pull_policy }}
        resources:
          requests:
            cpu: {{ cleanup_cron.requests.cpu }}
            memory: {{ cleanup_cron.requests.memory }}
          limits:
            cpu: {{ cleanup_cron.limits.cpu }}
            memory: {{ cleanup_cron.limits.memory }}
        volumeMounts:
        - name: "{{ name }}-cleanup-resources-script"
          mountPath: "{{ micro_service.path_prefix }}/scripts"
      volumes:
        - name: "{{ name }}-cleanup-resources-script"
          configMap:
            name: "{{ name }}-cleanup-resources-script"
            items:
            - key: "cleanup-resources.sh"
              path: "cleanup-resources.sh"

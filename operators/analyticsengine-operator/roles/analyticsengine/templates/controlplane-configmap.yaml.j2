apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ name }}-deployment-properties"
  labels:
    function: "{{ name }}-deployment-properties"
{% if cpdLabels  %} 
    {{ cpdLabels | to_nice_yaml| indent(4) }}
{% endif %}
data:
  deployment-properties: |-
    ctmServiceUrl={{ micro_service.scheme }}://{{ name }}-control-plane:{{ micro_service.port }}/ctm/v1/cluster-template
    clusterServiceUrl={{ micro_service.scheme }}://{{ name }}-control-plane:{{ micro_service.port }}/ClusterService/v1/cluster
    deployerServiceUrl={{ micro_service.scheme }}://{{ name }}-control-plane:{{ micro_service.port }}/deployer/v1/deploymentRequest
    kernelServiceUrl={{ micro_service.scheme }}://{{ name }}-control-plane:{{ micro_service.port }}/ae/v1
    volumeServiceUrl={{ micro_service.scheme }}://{{ name }}-control-plane:{{ micro_service.port }}/ctm/v1/volume
    namespaceServiceUrl={{ micro_service.scheme }}://{{ name }}-control-plane:{{ micro_service.port }}/namespace_service/v1/namespace
    dataplaneServiceUrl={{ micro_service.scheme }}://{{ name }}-control-plane:{{ micro_service.port }}/dataplane_manager/v1/dataplane
    instanceServiceUrl={{ micro_service.scheme }}://{{ name }}-control-plane:{{ micro_service.port }}/instance_manager/v1/instance
    instanceServiceV3Url={{ micro_service.scheme }}://{{ name }}-control-plane:{{ micro_service.port }}/instance_manager/v3/instances
    meteringServiceUrl={{ micro_service.scheme }}://{{ name }}-control-plane:{{ micro_service.port }}/metering_service/v1/metering
    sparkServiceUrl={{ micro_service.dataplane_scheme }}://{{ name }}-control-plane:{{ micro_service.port }}/ClusterService/v1/spark
    jkgServiceUrl={{ micro_service.dataplane_scheme }}://{{ name }}-control-plane:{{ micro_service.port }}/ClusterService/v1/jkg
    jobServiceUrl={{ micro_service.scheme }}://{{ name }}-control-plane:{{ micro_service.port }}/jobService
    helmDeployerURL={{ micro_service.scheme }}://{{ name }}-control-plane:{{ micro_service.port }}/helm-deployer/v1/releases
    serviceProviderUrl={{ micro_service.scheme }}://{{ name }}-control-plane:{{ micro_service.port }}/v1
    chartUrl-SparkCluster={{ micro_service.dataplane_scheme }}://{{ name }}-helm-repo-headless.{{ namespace }}.svc.cluster.local:9080/helm/stable/spark-1.1.1.tgz
    chartUrl-namespace={{ micro_service.dataplane_scheme }}://{{ name }}-helm-repo-headless.{{ namespace }}.svc.cluster.local:9080/helm/stable/kernel-namespace-1.1.1.tgz
    chartUrl-kernel={{ micro_service.dataplane_scheme }}://{{ name }}-helm-repo-headless.{{ namespace }}.svc.cluster.local:9080/helm/stable/{{ charts.create_kernel }}
    chartUrl-kernel-cp4d={{ micro_service.dataplane_scheme }}://{{ name }}-helm-repo-headless.{{ namespace }}.svc.cluster.local:9080/helm/stable/{{ charts.create_kernel }}
    chartUrl-kernelV3-cp4d={{ micro_service.dataplane_scheme }}://{{ name }}-helm-repo-headless.{{ namespace }}.svc.cluster.local:9080/helm/stable/{{ charts.create_kernel_v3 }}
    chartUrl-deleteKernel={{ micro_service.dataplane_scheme }}://{{ name }}-helm-repo-headless.{{ namespace }}.svc.cluster.local:9080/helm/stable/{{ charts.delete_kernel }}
    chartUrl-jkg={{ micro_service.dataplane_scheme }}://{{ name }}-helm-repo-headless.{{ namespace }}.svc.cluster.local:9080/helm/stable/jkg-1.1.1.tgz
    chartUrl-HistoryServer-cp4d={{ micro_service.dataplane_scheme }}://{{ name }}-helm-repo-headless.{{ namespace }}.svc.cluster.local:9080/helm/stable/spark-history-icp4d-1.0.0.tgz
    chartUrl-job={{ micro_service.dataplane_scheme }}://{{ name }}-helm-repo-headless.{{ namespace }}.svc.cluster.local:9080/helm/stable/{{ charts.create_job_v1 }}
    chartUrl-jobV2-cp4d={{ micro_service.dataplane_scheme }}://{{ name }}-helm-repo-headless.{{ namespace }}.svc.cluster.local:9080/helm/stable/{{ charts.create_job_v2 }}
    chartUrl-jobV2={{ micro_service.dataplane_scheme }}://{{ name }}-helm-repo-headless.{{ namespace }}.svc.cluster.local:9080/helm/stable/{{ charts.create_job_v3 }}
    chartUrl-jobV3-cp4d={{ micro_service.dataplane_scheme }}://{{ name }}-helm-repo-headless.{{ namespace }}.svc.cluster.local:9080/helm/stable/{{ charts.create_job_v4 }}
    chartUrl-serviceInstanceCustomisation-cp4d={{ micro_service.dataplane_scheme }}://{{ name }}-helm-repo-headless.{{ namespace }}.svc.cluster.local:9080/helm/stable/instance-ui-0.1.0.tgz
    service_broker_type={{ service_broker.type }}
    zen_core_tiller_url={{ zen_core.tiller_endpoint }}
    zenCoreApiServiceUrl={{ icp4d.environment_url }}
    volumeServiceURI=zen-data/v1/volumes
    controlPlaneGatewayUrl={{ icp4d.nginx_url }}/ae
    controlPlaneHostname={{ icp4d.nginx_url }}
    mqKernelDeleteQueueName=kernel.delete.queue.{{ namespace }}
    mqKernelDeleteRoutingKey=kernel.delete.routingkey.{{ namespace }}
    mqJobCleanupQueueName=job.cleanup.queue.{{ namespace }}
    mqJobCleanupRoutingKey=job.cleanup.{{ namespace }}
    swiftEndPointUrl=http://swift-swift:9855/tiller/v2
    ENV_SERVICE_URL={{ icp4d.environment_url }}/v2/environments
    ENV=DEV
    CHECK_EVENTS_ENABLED=true
    DeploymentMode=local
{% if image_tags is defined and image_tags.tag30 is defined %}
{% set image_suffix = image_tags.tag30 %}
{% set image_separator = ":" %}
{% else %}
{% set image_suffix = image_digests.spark_runtime_v30 %}
{% set image_separator = "@" %}
{% endif %}
{% if pull_prefix is defined and pull_prefix.spark_runtime_v30 is defined %}
{% set image_prefix = pull_prefix.spark_runtime_v30 %}
{% else %}
{% set image_prefix = pullPrefix %}
{% endif %}
    dockerRegistry={{ image_prefix }}
    sparkHistoryServerImage={{ images.spark_runtime_v30 }}{{ image_separator }}{{ image_suffix }}
    Namespace={{ namespace }}
    asyncDelete=false
    isFipsEnabled={{ service_config.is_fips_enabled | lower }}
    architecture={{ global.architecture }}
    AuditEventLogFile={{ configs.audit_event_log_file }}
    CLOUD_PAK_INSTANCE_ID={{ cloudpak_instance_id }}
    wdpSpacesUrl={{ icp4d.environment_url }}/v2/spaces
    wdpJobsUrl={{ icp4d.environment_url }}/v2/jobs
{% if spark_metastoredb.cockroachdb is defined %}
{% else %}
    dbTypeName=postgresql
{% endif %}
    isDBPoolingEnabled=false
    isSparkAdvCPDModuleInstalled={{ service_config.is_spark_adv_enabled | lower }}
    isImmediatelyJobDeleteEnabled={{ service_config.is_immediately_job_delete_enabled | lower }}
    deployerType=helm-deployer
    librarysetDistributionModel=distributed
    librarysetMaxSizeInMB=2000
